(()=>{"use strict";var e={417:(e,t,r)=>{r.d(t,{A:()=>s});var n=r(354),o=r.n(n),a=r(314),i=r.n(a)()(o());i.push([e.id,"#place-boat-modal{\n    width: 500px;\n    padding: 40px 10px 40px 10px;\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%) scale(0);\n    z-index: 10;\n    background-color: #eeeeee;\n    border-radius: 10px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 20px;\n}\n\n#place-boat-modal.active{\n    transform: translate(-50%, -50%) scale(1);\n}\n\n#overlay{\n    position: fixed;\n    opacity: 0;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: rgba(0, 0, 0, 0.3);\n    pointer-events: none;\n}\n\n#overlay.active{\n    opacity: 1;\n    pointer-events: all;\n}\n\n.grid{\n    display: grid;\n    grid-template-rows: repeat(10, 30px);\n    grid-template-columns: repeat(10, 30px);\n    gap: 1px;\n}\n\n.grid-item{\n    outline: 1px solid black;\n}\n\n.grid-item.place:hover, .grid-item.computer:hover{\n    cursor: pointer;\n}","",{version:3,sources:["webpack://./src/styles/boatModal.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,4BAA4B;IAC5B,eAAe;IACf,QAAQ;IACR,SAAS;IACT,yCAAyC;IACzC,WAAW;IACX,yBAAyB;IACzB,mBAAmB;IACnB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,yCAAyC;AAC7C;;AAEA;IACI,eAAe;IACf,UAAU;IACV,MAAM;IACN,OAAO;IACP,QAAQ;IACR,SAAS;IACT,oCAAoC;IACpC,oBAAoB;AACxB;;AAEA;IACI,UAAU;IACV,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,oCAAoC;IACpC,uCAAuC;IACvC,QAAQ;AACZ;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,eAAe;AACnB",sourcesContent:["#place-boat-modal{\r\n    width: 500px;\r\n    padding: 40px 10px 40px 10px;\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%) scale(0);\r\n    z-index: 10;\r\n    background-color: #eeeeee;\r\n    border-radius: 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 20px;\r\n}\r\n\r\n#place-boat-modal.active{\r\n    transform: translate(-50%, -50%) scale(1);\r\n}\r\n\r\n#overlay{\r\n    position: fixed;\r\n    opacity: 0;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background-color: rgba(0, 0, 0, 0.3);\r\n    pointer-events: none;\r\n}\r\n\r\n#overlay.active{\r\n    opacity: 1;\r\n    pointer-events: all;\r\n}\r\n\r\n.grid{\r\n    display: grid;\r\n    grid-template-rows: repeat(10, 30px);\r\n    grid-template-columns: repeat(10, 30px);\r\n    gap: 1px;\r\n}\r\n\r\n.grid-item{\r\n    outline: 1px solid black;\r\n}\r\n\r\n.grid-item.place:hover, .grid-item.computer:hover{\r\n    cursor: pointer;\r\n}"],sourceRoot:""}]);const s=i},208:(e,t,r)=>{r.d(t,{A:()=>s});var n=r(354),o=r.n(n),a=r(314),i=r.n(a)()(o());i.push([e.id,"*{\n    margin: 0;\n    padding: 0;\n}\n\nbody{\n    font-family: arial;\n    height: 100vh;\n    padding: 40px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 50px;\n}\n\nh1{\n    margin: 0;\n}\n\nh2{\n    margin: 0;\n}\n\n#title{\n    font-size: 60px;\n    font-weight: 600;\n}\n\n#main{\n    display: flex;\n    gap: 100px;\n}","",{version:3,sources:["webpack://./src/styles/index.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,SAAS;AACb;;AAEA;IACI,SAAS;AACb;;AAEA;IACI,eAAe;IACf,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,UAAU;AACd",sourcesContent:["*{\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\nbody{\r\n    font-family: arial;\r\n    height: 100vh;\r\n    padding: 40px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 50px;\r\n}\r\n\r\nh1{\r\n    margin: 0;\r\n}\r\n\r\nh2{\r\n    margin: 0;\r\n}\r\n\r\n#title{\r\n    font-size: 60px;\r\n    font-weight: 600;\r\n}\r\n\r\n#main{\r\n    display: flex;\r\n    gap: 100px;\r\n}"],sourceRoot:""}]);const s=i},316:(e,t,r)=>{r.d(t,{A:()=>s});var n=r(354),o=r.n(n),a=r(314),i=r.n(a)()(o());i.push([e.id,"#display-winner-modal{\n    width: 300px;\n    padding: 20px 0 20px 0;\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%) scale(0);\n    z-index: 10;\n    background-color: #eeeeee;\n    border-radius: 10px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 20px;\n}\n\n#display-winner-modal.active{\n    transform: translate(-50%, -50%) scale(1);\n}\n\n#new-game-button{\n    padding: 12px;\n    font-size: 15px;\n    color: #eeeeee;\n    background-color: #444444;\n    border-radius: 10px;\n    border: none;\n}\n\n#new-game-button:hover{\n    cursor: pointer;\n    transform: scale(1.03)\n}","",{version:3,sources:["webpack://./src/styles/winnerModal.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,sBAAsB;IACtB,eAAe;IACf,QAAQ;IACR,SAAS;IACT,yCAAyC;IACzC,WAAW;IACX,yBAAyB;IACzB,mBAAmB;IACnB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,yCAAyC;AAC7C;;AAEA;IACI,aAAa;IACb,eAAe;IACf,cAAc;IACd,yBAAyB;IACzB,mBAAmB;IACnB,YAAY;AAChB;;AAEA;IACI,eAAe;IACf;AACJ",sourcesContent:["#display-winner-modal{\r\n    width: 300px;\r\n    padding: 20px 0 20px 0;\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%) scale(0);\r\n    z-index: 10;\r\n    background-color: #eeeeee;\r\n    border-radius: 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 20px;\r\n}\r\n\r\n#display-winner-modal.active{\r\n    transform: translate(-50%, -50%) scale(1);\r\n}\r\n\r\n#new-game-button{\r\n    padding: 12px;\r\n    font-size: 15px;\r\n    color: #eeeeee;\r\n    background-color: #444444;\r\n    border-radius: 10px;\r\n    border: none;\r\n}\r\n\r\n#new-game-button:hover{\r\n    cursor: pointer;\r\n    transform: scale(1.03)\r\n}"],sourceRoot:""}]);const s=i},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",n=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),n&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),n&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,n,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(n)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);n&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),r&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=r):d[2]=r),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),t.push(d))}},t}},354:e=>{e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var a={},i=[],s=0;s<e.length;s++){var l=e[s],c=n.base?l[0]+n.base:l[0],d=a[c]||0,A="".concat(c," ").concat(d);a[c]=d+1;var p=r(A),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(u);else{var m=o(u,n);n.byIndex=s,t.splice(s,0,{identifier:A,updater:m,references:1})}i.push(A)}return i}function o(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,o){var a=n(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=r(a[i]);t[s].references--}for(var l=n(e,o),c=0;c<a.length;c++){var d=r(a[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=l}}},659:e=>{var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,o&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var a=r.sourceMap;a&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var a=t[n]={id:n,exports:{}};return e[n](a,a.exports,r),a.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.nc=void 0,(()=>{var e=r(72),t=r.n(e),n=r(825),o=r.n(n),a=r(659),i=r.n(a),s=r(56),l=r.n(s),c=r(540),d=r.n(c),A=r(113),p=r.n(A),u=r(208),m={};m.styleTagTransform=p(),m.setAttributes=l(),m.insert=i().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=d(),t()(u.A,m),u.A&&u.A.locals&&u.A.locals;var h=r(417),C={};C.styleTagTransform=p(),C.setAttributes=l(),C.insert=i().bind(null,"head"),C.domAPI=o(),C.insertStyleElement=d(),t()(h.A,C),h.A&&h.A.locals&&h.A.locals;var f=r(316),y={};y.styleTagTransform=p(),y.setAttributes=l(),y.insert=i().bind(null,"head"),y.domAPI=o(),y.insertStyleElement=d(),t()(f.A,y),f.A&&f.A.locals&&f.A.locals;class g{constructor(){this.board=[],this.sunkShips=0,this.isOver=!1;for(let e=0;e<10;e++){let e=[];for(let t=0;t<10;t++)e.push(!1);this.board.push(e)}}placeShip(e,t,r){if(9-e+1<r.length)return!1;let n=e;for(let e=0;e<r.length;e++){if(!1!==this.board[n][t])return!1;n++}for(let n=0;n<r.length;n++)this.board[e][t]=r,e++;return!0}receiveAttack(e,t){return 1!=this.board[e][t]&&"hit"!=this.board[e][t]&&(0!=this.board[e][t]?(this.board[e][t].hit(),this.board[e][t].isSunk()&&(this.sunkShips+=1,5==this.sunkShips&&(this.isOver=!0)),this.board[e][t]="hit"):this.board[e][t]=!0,!0)}}class v{constructor(){this.gameBoard=new g}hit(e){for(;;){let t=Math.floor(10*Math.random()),r=Math.floor(10*Math.random());if(e.gameBoard.receiveAttack(t,r))break}}}class b{constructor(e){this.length=e,this.hitCount=0}hit(){this.hitCount+=1}isSunk(){return this.hitCount==this.length}}class I{constructor(){this.gameBoard=new g}hit(e,t,r){return r.gameBoard.receiveAttack(e,t)}}class x{static init(){const e=document.querySelector("#place-boat-modal"),t=document.querySelector("#overlay");e.classList.add("active"),t.classList.add("active"),this.notAiPlayer=new I,this.aiPlayer=new v,this.playerGameBoard=this.notAiPlayer.gameBoard,this.computerGameBoard=this.aiPlayer.gameBoard,this.boatLengths=[5,4,3,3,2],this.placeCount=0,x.loadPlaceModalGrid(),x.loadPlayerModalGrid(),x.loadComputerModalGrid(),x.initNewGameButton()}static loadPlaceModalGrid(){const e=document.getElementById("place-boat-grid");e.innerHTML="";for(let t=0;t<10;t++)for(let r=0;r<10;r++){let n=document.createElement("div");n.classList.add("grid-item"),n.classList.add("place"),n.id="place "+r+t,n.style.backgroundColor=x.getPlayerGridItemColor(r,t),e.appendChild(n)}x.initPlaceGridItemHover()}static loadPlayerModalGrid(){const e=document.getElementById("player-boat-grid");e.innerHTML="";for(let t=0;t<10;t++)for(let r=0;r<10;r++){let n=document.createElement("div");n.classList.add("grid-item"),n.classList.add("player"),n.id="player "+r+t,n.style.backgroundColor=x.getPlayerGridItemColor(r,t),e.appendChild(n)}}static loadComputerModalGrid(){const e=document.getElementById("computer-boat-grid");e.innerHTML="";for(let t=0;t<10;t++)for(let r=0;r<10;r++){let n=document.createElement("div");n.classList.add("grid-item"),n.classList.add("computer"),n.id="computer "+r+t,n.style.backgroundColor=x.getComputerGridItemColor(r,t),e.appendChild(n)}x.initComputerGridHover()}static initNewGameButton(){const e=document.querySelector("#display-winner-modal"),t=document.querySelector("#overlay");document.querySelector("#new-game-button").addEventListener("click",(()=>{e.classList.remove("active"),t.classList.remove("active"),this.init()}))}static initPlaceGridItemHover(){document.querySelector("#place-boat-grid").querySelectorAll(".grid-item").forEach((e=>{e.addEventListener("mouseover",(()=>{this.placeGridItemMouseover(e.id,!0)})),e.addEventListener("mouseout",(()=>{this.placeGridItemMouseover(e.id,!1)})),e.addEventListener("click",(()=>{this.placeGridItemClick(e.id)}))}))}static initComputerGridHover(){document.querySelector("#computer-boat-grid").querySelectorAll(".grid-item").forEach((e=>{e.addEventListener("mouseover",(()=>{this.computerGridItemMouseover(e.id,!0)})),e.addEventListener("mouseout",(()=>{this.computerGridItemMouseover(e.id,!1)})),e.addEventListener("click",(()=>{this.computerGridItemClick(e.id)}))}))}static getPlayerGridItemColor(e,t){return 0==this.playerGameBoard.board[e][t]?"#FFFFFF00":1==this.playerGameBoard.board[e][t]?"#92ffb5":"hit"==this.playerGameBoard.board[e][t]?"#ff8585":"#444444"}static getComputerGridItemColor(e,t){return 1==this.computerGameBoard.board[e][t]?"#92ffb5":"hit"==this.computerGameBoard.board[e][t]?"#ff8585":"#FFFFFF00"}static updateBoatType(){const e=document.querySelector("h2"),t=["Carrier","Battleship","Destroyer","Submarine","Patrol Boat"];if(this.placeCount+=1,this.placeCount<5)e.textContent="Place your "+t[this.placeCount];else{const r=document.querySelector("#place-boat-modal"),n=document.querySelector("#overlay");r.classList.remove("active"),n.classList.remove("active"),e.textContent="Place your "+t[0]}}static placeGridItemMouseover(e,t){let r=this.boatLengths[this.placeCount];for(let n=0;n<r;n++){let r=Number(e[6])+n;if(r>9)break;let o="place "+r+e[7];document.getElementById(o).style.backgroundColor=t?"#92ffb5":this.getPlayerGridItemColor(Number(e[6])+n,Number(e[7]))}}static computerGridItemMouseover(e,t){const r=document.getElementById(e);"rgba(255, 255, 255, 0)"==r.style.backgroundColor&&t?r.style.backgroundColor="#00000020":t||(r.style.backgroundColor=this.getComputerGridItemColor(Number(e[9]),Number(e[10])))}static placeGridItemClick(e){let t=new b(this.boatLengths[this.placeCount]),r=new b(this.boatLengths[this.placeCount]);this.playerGameBoard.placeShip(Number(e[6]),Number(e[7]),t)&&(this.computerGameBoard.placeShip(Number(e[6]),Number(e[7]),r),x.loadPlaceModalGrid(),x.loadPlayerModalGrid(),x.updateBoatType())}static computerGridItemClick(e){if(this.notAiPlayer.hit(Number(e[9]),Number(e[10]),this.aiPlayer))if(x.loadComputerModalGrid(),this.aiPlayer.gameBoard.isOver){const e=document.querySelector("#display-winner-modal"),t=document.querySelector("#overlay");e.classList.add("active"),t.classList.add("active"),e.querySelector("h1").textContent="Player Wins"}else{if(this.aiPlayer.hit(this.notAiPlayer),this.notAiPlayer.gameBoard.isOver){const e=document.querySelector("#display-winner-modal"),t=document.querySelector("#overlay");e.classList.add("active"),t.classList.add("active"),e.querySelector("h1").textContent="Computer Wins"}x.loadPlayerModalGrid()}}}document.addEventListener("DOMContentLoaded",x.init())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,