(()=>{"use strict";var e={417:(e,t,n)=>{n.d(t,{A:()=>s});var r=n(354),a=n.n(r),o=n(314),i=n.n(o)()(a());i.push([e.id,"#place-boat-modal{\n    width: 500px;\n    padding: 40px 10px 40px 10px;\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%) scale(0);\n    z-index: 10;\n    background-color: #eeeeee;\n    border-radius: 10px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 20px;\n}\n\n#place-boat-modal.active{\n    transform: translate(-50%, -50%) scale(1);\n}\n\n#overlay{\n    position: fixed;\n    opacity: 0;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: rgba(0, 0, 0, 0.3);\n    pointer-events: none;\n}\n\n#overlay.active{\n    opacity: 1;\n    pointer-events: all;\n}\n\n.grid{\n    /* width: 40%; */\n    display: grid;\n    grid-template-rows: repeat(10, 30px);\n    grid-template-columns: repeat(10, 30px);\n    gap: 1px;\n}\n\n.grid-item{\n    outline: 1px solid black;\n}\n\n.grid-item.place:hover, .grid-item.computer:hover{\n    cursor: pointer;\n}\n\n@media (max-width: 700px){\n    .grid{\n        /* width: 40%; */\n        display: grid;\n        grid-template-rows: repeat(10, 25px);\n        grid-template-columns: repeat(10, 25px);\n        gap: 1px;\n    }\n}\n\n@media (max-width: 600px){\n    #place-boat-modal{\n        width: 350px\n    }\n\n    h1{\n        text-align: center;\n    }\n}","",{version:3,sources:["webpack://./src/styles/boatModal.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,4BAA4B;IAC5B,eAAe;IACf,QAAQ;IACR,SAAS;IACT,yCAAyC;IACzC,WAAW;IACX,yBAAyB;IACzB,mBAAmB;IACnB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,yCAAyC;AAC7C;;AAEA;IACI,eAAe;IACf,UAAU;IACV,MAAM;IACN,OAAO;IACP,QAAQ;IACR,SAAS;IACT,oCAAoC;IACpC,oBAAoB;AACxB;;AAEA;IACI,UAAU;IACV,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;IAChB,aAAa;IACb,oCAAoC;IACpC,uCAAuC;IACvC,QAAQ;AACZ;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI;QACI,gBAAgB;QAChB,aAAa;QACb,oCAAoC;QACpC,uCAAuC;QACvC,QAAQ;IACZ;AACJ;;AAEA;IACI;QACI;IACJ;;IAEA;QACI,kBAAkB;IACtB;AACJ",sourcesContent:["#place-boat-modal{\n    width: 500px;\n    padding: 40px 10px 40px 10px;\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%) scale(0);\n    z-index: 10;\n    background-color: #eeeeee;\n    border-radius: 10px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 20px;\n}\n\n#place-boat-modal.active{\n    transform: translate(-50%, -50%) scale(1);\n}\n\n#overlay{\n    position: fixed;\n    opacity: 0;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: rgba(0, 0, 0, 0.3);\n    pointer-events: none;\n}\n\n#overlay.active{\n    opacity: 1;\n    pointer-events: all;\n}\n\n.grid{\n    /* width: 40%; */\n    display: grid;\n    grid-template-rows: repeat(10, 30px);\n    grid-template-columns: repeat(10, 30px);\n    gap: 1px;\n}\n\n.grid-item{\n    outline: 1px solid black;\n}\n\n.grid-item.place:hover, .grid-item.computer:hover{\n    cursor: pointer;\n}\n\n@media (max-width: 700px){\n    .grid{\n        /* width: 40%; */\n        display: grid;\n        grid-template-rows: repeat(10, 25px);\n        grid-template-columns: repeat(10, 25px);\n        gap: 1px;\n    }\n}\n\n@media (max-width: 600px){\n    #place-boat-modal{\n        width: 350px\n    }\n\n    h1{\n        text-align: center;\n    }\n}"],sourceRoot:""}]);const s=i},208:(e,t,n)=>{n.d(t,{A:()=>s});var r=n(354),a=n.n(r),o=n(314),i=n.n(o)()(a());i.push([e.id,"*{\n    margin: 0;\n    padding: 0;\n}\n\nbody{\n    font-family: arial;\n    height: 100vh;\n    padding: 40px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 50px;\n}\n\nh1{\n    margin: 0;\n}\n\nh2{\n    margin: 0;\n}\n\n#title{\n    font-size: 60px;\n    font-weight: 600;\n}\n\n#main{\n    display: flex;\n    justify-content: center;\n    gap: 60px;\n}\n\n@media (max-width: 770px){\n    #main{\n        gap: 30px;\n    }\n}\n\n@media (max-width: 600px){\n    #main{\n        flex-direction: column;\n    }\n}","",{version:3,sources:["webpack://./src/styles/index.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,SAAS;AACb;;AAEA;IACI,SAAS;AACb;;AAEA;IACI,eAAe;IACf,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,SAAS;AACb;;AAEA;IACI;QACI,SAAS;IACb;AACJ;;AAEA;IACI;QACI,sBAAsB;IAC1B;AACJ",sourcesContent:["*{\n    margin: 0;\n    padding: 0;\n}\n\nbody{\n    font-family: arial;\n    height: 100vh;\n    padding: 40px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 50px;\n}\n\nh1{\n    margin: 0;\n}\n\nh2{\n    margin: 0;\n}\n\n#title{\n    font-size: 60px;\n    font-weight: 600;\n}\n\n#main{\n    display: flex;\n    justify-content: center;\n    gap: 60px;\n}\n\n@media (max-width: 770px){\n    #main{\n        gap: 30px;\n    }\n}\n\n@media (max-width: 600px){\n    #main{\n        flex-direction: column;\n    }\n}"],sourceRoot:""}]);const s=i},316:(e,t,n)=>{n.d(t,{A:()=>s});var r=n(354),a=n.n(r),o=n(314),i=n.n(o)()(a());i.push([e.id,"#display-winner-modal{\n    width: 300px;\n    padding: 20px 0 20px 0;\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%) scale(0);\n    z-index: 10;\n    background-color: #eeeeee;\n    border-radius: 10px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 20px;\n}\n\n#display-winner-modal.active{\n    transform: translate(-50%, -50%) scale(1);\n}\n\n#new-game-button{\n    padding: 12px;\n    font-size: 15px;\n    color: #eeeeee;\n    background-color: #444444;\n    border-radius: 10px;\n    border: none;\n}\n\n#new-game-button:hover{\n    cursor: pointer;\n    transform: scale(1.03)\n}","",{version:3,sources:["webpack://./src/styles/winnerModal.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,sBAAsB;IACtB,eAAe;IACf,QAAQ;IACR,SAAS;IACT,yCAAyC;IACzC,WAAW;IACX,yBAAyB;IACzB,mBAAmB;IACnB,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,yCAAyC;AAC7C;;AAEA;IACI,aAAa;IACb,eAAe;IACf,cAAc;IACd,yBAAyB;IACzB,mBAAmB;IACnB,YAAY;AAChB;;AAEA;IACI,eAAe;IACf;AACJ",sourcesContent:["#display-winner-modal{\n    width: 300px;\n    padding: 20px 0 20px 0;\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%) scale(0);\n    z-index: 10;\n    background-color: #eeeeee;\n    border-radius: 10px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 20px;\n}\n\n#display-winner-modal.active{\n    transform: translate(-50%, -50%) scale(1);\n}\n\n#new-game-button{\n    padding: 12px;\n    font-size: 15px;\n    color: #eeeeee;\n    background-color: #444444;\n    border-radius: 10px;\n    border: none;\n}\n\n#new-game-button:hover{\n    cursor: pointer;\n    transform: scale(1.03)\n}"],sourceRoot:""}]);const s=i},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(i[l]=!0)}for(var d=0;d<e.length;d++){var c=[].concat(e[d]);r&&i[c[0]]||(void 0!==o&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=o),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),t.push(c))}},t}},354:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],s=0;s<e.length;s++){var l=e[s],d=r.base?l[0]+r.base:l[0],c=o[d]||0,A="".concat(d," ").concat(c);o[d]=c+1;var p=n(A),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(u);else{var m=a(u,r);r.byIndex=s,t.splice(s,0,{identifier:A,updater:m,references:1})}i.push(A)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var s=n(o[i]);t[s].references--}for(var l=r(e,a),d=0;d<o.length;d++){var c=n(o[d]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}o=l}}},659:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(72),t=n.n(e),r=n(825),a=n.n(r),o=n(659),i=n.n(o),s=n(56),l=n.n(s),d=n(540),c=n.n(d),A=n(113),p=n.n(A),u=n(208),m={};m.styleTagTransform=p(),m.setAttributes=l(),m.insert=i().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=c(),t()(u.A,m),u.A&&u.A.locals&&u.A.locals;var C=n(417),h={};h.styleTagTransform=p(),h.setAttributes=l(),h.insert=i().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=c(),t()(C.A,h),C.A&&C.A.locals&&C.A.locals;var f=n(316),g={};g.styleTagTransform=p(),g.setAttributes=l(),g.insert=i().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=c(),t()(f.A,g),f.A&&f.A.locals&&f.A.locals;class y{constructor(){this.board=[],this.sunkShips=0,this.isOver=!1;for(let e=0;e<10;e++){let e=[];for(let t=0;t<10;t++)e.push(!1);this.board.push(e)}}placeShip(e,t,n){if(9-e+1<n.length)return!1;let r=e;for(let e=0;e<n.length;e++){if(!1!==this.board[r][t])return!1;r++}for(let r=0;r<n.length;r++)this.board[e][t]=n,e++;return!0}receiveAttack(e,t){return 1!=this.board[e][t]&&"hit"!=this.board[e][t]&&(0!=this.board[e][t]?(this.board[e][t].hit(),this.board[e][t].isSunk()&&(this.sunkShips+=1,5==this.sunkShips&&(this.isOver=!0)),this.board[e][t]="hit"):this.board[e][t]=!0,!0)}}class I{constructor(){this.gameBoard=new y}hit(e){for(;;){let t=Math.floor(10*Math.random()),n=Math.floor(10*Math.random());if(e.gameBoard.receiveAttack(t,n))break}}}class v{constructor(e){this.length=e,this.hitCount=0}hit(){this.hitCount+=1}isSunk(){return this.hitCount==this.length}}class b{constructor(){this.gameBoard=new y}hit(e,t,n){return n.gameBoard.receiveAttack(e,t)}}class x{static init(){const e=document.querySelector("#place-boat-modal"),t=document.querySelector("#overlay");e.classList.add("active"),t.classList.add("active"),this.notAiPlayer=new b,this.aiPlayer=new I,this.playerGameBoard=this.notAiPlayer.gameBoard,this.computerGameBoard=this.aiPlayer.gameBoard,this.boatLengths=[5,4,3,3,2],this.placeCount=0,x.loadPlaceModalGrid(),x.loadPlayerModalGrid(),x.loadComputerModalGrid(),x.initNewGameButton()}static loadPlaceModalGrid(){const e=document.getElementById("place-boat-grid");e.innerHTML="";for(let t=0;t<10;t++)for(let n=0;n<10;n++){let r=document.createElement("div");r.classList.add("grid-item"),r.classList.add("place"),r.id="place "+n+t,r.style.backgroundColor=x.getPlayerGridItemColor(n,t),e.appendChild(r)}x.initPlaceGridItemHover()}static loadPlayerModalGrid(){const e=document.getElementById("player-boat-grid");e.innerHTML="";for(let t=0;t<10;t++)for(let n=0;n<10;n++){let r=document.createElement("div");r.classList.add("grid-item"),r.classList.add("player"),r.id="player "+n+t,r.style.backgroundColor=x.getPlayerGridItemColor(n,t),e.appendChild(r)}}static loadComputerModalGrid(){const e=document.getElementById("computer-boat-grid");e.innerHTML="";for(let t=0;t<10;t++)for(let n=0;n<10;n++){let r=document.createElement("div");r.classList.add("grid-item"),r.classList.add("computer"),r.id="computer "+n+t,r.style.backgroundColor=x.getComputerGridItemColor(n,t),e.appendChild(r)}x.initComputerGridHover()}static initNewGameButton(){const e=document.querySelector("#display-winner-modal"),t=document.querySelector("#overlay");document.querySelector("#new-game-button").addEventListener("click",(()=>{e.classList.remove("active"),t.classList.remove("active"),this.init()}))}static initPlaceGridItemHover(){document.querySelector("#place-boat-grid").querySelectorAll(".grid-item").forEach((e=>{e.addEventListener("mouseover",(()=>{this.placeGridItemMouseover(e.id,!0)})),e.addEventListener("mouseout",(()=>{this.placeGridItemMouseover(e.id,!1)})),e.addEventListener("click",(()=>{this.placeGridItemClick(e.id)}))}))}static initComputerGridHover(){document.querySelector("#computer-boat-grid").querySelectorAll(".grid-item").forEach((e=>{e.addEventListener("mouseover",(()=>{this.computerGridItemMouseover(e.id,!0)})),e.addEventListener("mouseout",(()=>{this.computerGridItemMouseover(e.id,!1)})),e.addEventListener("click",(()=>{this.computerGridItemClick(e.id)}))}))}static getPlayerGridItemColor(e,t){return 0==this.playerGameBoard.board[e][t]?"#FFFFFF00":1==this.playerGameBoard.board[e][t]?"#92ffb5":"hit"==this.playerGameBoard.board[e][t]?"#ff8585":"#444444"}static getComputerGridItemColor(e,t){return 1==this.computerGameBoard.board[e][t]?"#92ffb5":"hit"==this.computerGameBoard.board[e][t]?"#ff8585":"#FFFFFF00"}static updateBoatType(){const e=document.querySelector("h2"),t=["Carrier","Battleship","Destroyer","Submarine","Patrol Boat"];if(this.placeCount+=1,this.placeCount<5)e.textContent="Place your "+t[this.placeCount];else{const n=document.querySelector("#place-boat-modal"),r=document.querySelector("#overlay");n.classList.remove("active"),r.classList.remove("active"),e.textContent="Place your "+t[0]}}static placeGridItemMouseover(e,t){let n=this.boatLengths[this.placeCount];for(let r=0;r<n;r++){let n=Number(e[6])+r;if(n>9)break;let a="place "+n+e[7];document.getElementById(a).style.backgroundColor=t?"#92ffb5":this.getPlayerGridItemColor(Number(e[6])+r,Number(e[7]))}}static computerGridItemMouseover(e,t){const n=document.getElementById(e);"rgba(255, 255, 255, 0)"==n.style.backgroundColor&&t?n.style.backgroundColor="#00000020":t||(n.style.backgroundColor=this.getComputerGridItemColor(Number(e[9]),Number(e[10])))}static placeGridItemClick(e){let t=new v(this.boatLengths[this.placeCount]),n=new v(this.boatLengths[this.placeCount]);this.playerGameBoard.placeShip(Number(e[6]),Number(e[7]),t)&&(this.computerGameBoard.placeShip(Number(e[6]),Number(e[7]),n),x.loadPlaceModalGrid(),x.loadPlayerModalGrid(),x.updateBoatType())}static computerGridItemClick(e){if(this.notAiPlayer.hit(Number(e[9]),Number(e[10]),this.aiPlayer))if(x.loadComputerModalGrid(),this.aiPlayer.gameBoard.isOver){const e=document.querySelector("#display-winner-modal"),t=document.querySelector("#overlay");e.classList.add("active"),t.classList.add("active"),e.querySelector("h1").textContent="Player Wins"}else{if(this.aiPlayer.hit(this.notAiPlayer),this.notAiPlayer.gameBoard.isOver){const e=document.querySelector("#display-winner-modal"),t=document.querySelector("#overlay");e.classList.add("active"),t.classList.add("active"),e.querySelector("h1").textContent="Computer Wins"}x.loadPlayerModalGrid()}}}document.addEventListener("DOMContentLoaded",x.init())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,